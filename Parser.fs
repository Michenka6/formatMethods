// Implementation file for parser generated by fsyacc
module book.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "Parser.fsy"

open AST

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | TRUE
  | FALSE
  | AND
  | OR
  | ANDBIT
  | ORBIT
  | BANG
  | EQ
  | LS
  | GR
  | LPAR
  | RPAR
  | LSQB
  | RSQB
  | ASS
  | SKIP
  | SEMI
  | IF
  | FI
  | DO
  | OD
  | THEN
  | ELSE
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | WORD of (string)
  | NUM of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_ANDBIT
    | TOKEN_ORBIT
    | TOKEN_BANG
    | TOKEN_EQ
    | TOKEN_LS
    | TOKEN_GR
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LSQB
    | TOKEN_RSQB
    | TOKEN_ASS
    | TOKEN_SKIP
    | TOKEN_SEMI
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_THEN
    | TOKEN_ELSE
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_WORD
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_aExpr
    | NONTERM_bExpr
    | NONTERM_gcExpr
    | NONTERM_cExpr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | TRUE  -> 1 
  | FALSE  -> 2 
  | AND  -> 3 
  | OR  -> 4 
  | ANDBIT  -> 5 
  | ORBIT  -> 6 
  | BANG  -> 7 
  | EQ  -> 8 
  | LS  -> 9 
  | GR  -> 10 
  | LPAR  -> 11 
  | RPAR  -> 12 
  | LSQB  -> 13 
  | RSQB  -> 14 
  | ASS  -> 15 
  | SKIP  -> 16 
  | SEMI  -> 17 
  | IF  -> 18 
  | FI  -> 19 
  | DO  -> 20 
  | OD  -> 21 
  | THEN  -> 22 
  | ELSE  -> 23 
  | TIMES  -> 24 
  | DIV  -> 25 
  | PLUS  -> 26 
  | MINUS  -> 27 
  | POW  -> 28 
  | WORD _ -> 29 
  | NUM _ -> 30 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_TRUE 
  | 2 -> TOKEN_FALSE 
  | 3 -> TOKEN_AND 
  | 4 -> TOKEN_OR 
  | 5 -> TOKEN_ANDBIT 
  | 6 -> TOKEN_ORBIT 
  | 7 -> TOKEN_BANG 
  | 8 -> TOKEN_EQ 
  | 9 -> TOKEN_LS 
  | 10 -> TOKEN_GR 
  | 11 -> TOKEN_LPAR 
  | 12 -> TOKEN_RPAR 
  | 13 -> TOKEN_LSQB 
  | 14 -> TOKEN_RSQB 
  | 15 -> TOKEN_ASS 
  | 16 -> TOKEN_SKIP 
  | 17 -> TOKEN_SEMI 
  | 18 -> TOKEN_IF 
  | 19 -> TOKEN_FI 
  | 20 -> TOKEN_DO 
  | 21 -> TOKEN_OD 
  | 22 -> TOKEN_THEN 
  | 23 -> TOKEN_ELSE 
  | 24 -> TOKEN_TIMES 
  | 25 -> TOKEN_DIV 
  | 26 -> TOKEN_PLUS 
  | 27 -> TOKEN_MINUS 
  | 28 -> TOKEN_POW 
  | 29 -> TOKEN_WORD 
  | 30 -> TOKEN_NUM 
  | 33 -> TOKEN_end_of_input
  | 31 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_aExpr 
    | 3 -> NONTERM_aExpr 
    | 4 -> NONTERM_aExpr 
    | 5 -> NONTERM_aExpr 
    | 6 -> NONTERM_aExpr 
    | 7 -> NONTERM_aExpr 
    | 8 -> NONTERM_aExpr 
    | 9 -> NONTERM_aExpr 
    | 10 -> NONTERM_aExpr 
    | 11 -> NONTERM_aExpr 
    | 12 -> NONTERM_bExpr 
    | 13 -> NONTERM_bExpr 
    | 14 -> NONTERM_bExpr 
    | 15 -> NONTERM_bExpr 
    | 16 -> NONTERM_bExpr 
    | 17 -> NONTERM_bExpr 
    | 18 -> NONTERM_bExpr 
    | 19 -> NONTERM_bExpr 
    | 20 -> NONTERM_bExpr 
    | 21 -> NONTERM_bExpr 
    | 22 -> NONTERM_bExpr 
    | 23 -> NONTERM_bExpr 
    | 24 -> NONTERM_bExpr 
    | 25 -> NONTERM_bExpr 
    | 26 -> NONTERM_gcExpr 
    | 27 -> NONTERM_gcExpr 
    | 28 -> NONTERM_cExpr 
    | 29 -> NONTERM_cExpr 
    | 30 -> NONTERM_cExpr 
    | 31 -> NONTERM_cExpr 
    | 32 -> NONTERM_cExpr 
    | 33 -> NONTERM_cExpr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 33 
let _fsyacc_tagOfErrorTerminal = 31

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | ANDBIT  -> "ANDBIT" 
  | ORBIT  -> "ORBIT" 
  | BANG  -> "BANG" 
  | EQ  -> "EQ" 
  | LS  -> "LS" 
  | GR  -> "GR" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LSQB  -> "LSQB" 
  | RSQB  -> "RSQB" 
  | ASS  -> "ASS" 
  | SKIP  -> "SKIP" 
  | SEMI  -> "SEMI" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | THEN  -> "THEN" 
  | ELSE  -> "ELSE" 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | WORD _ -> "WORD" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | ANDBIT  -> (null : System.Object) 
  | ORBIT  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | LS  -> (null : System.Object) 
  | GR  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LSQB  -> (null : System.Object) 
  | RSQB  -> (null : System.Object) 
  | ASS  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | SEMI  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | THEN  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | WORD _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 26us; 65535us; 6us; 7us; 27us; 9us; 28us; 10us; 29us; 11us; 30us; 12us; 31us; 13us; 32us; 14us; 33us; 15us; 34us; 16us; 45us; 17us; 46us; 17us; 47us; 17us; 48us; 17us; 49us; 17us; 50us; 22us; 51us; 18us; 52us; 21us; 53us; 19us; 54us; 20us; 56us; 23us; 63us; 17us; 65us; 24us; 66us; 25us; 68us; 26us; 72us; 17us; 74us; 17us; 9us; 65535us; 34us; 43us; 45us; 38us; 46us; 39us; 47us; 40us; 48us; 41us; 49us; 42us; 63us; 44us; 72us; 44us; 74us; 44us; 3us; 65535us; 63us; 60us; 72us; 61us; 74us; 62us; 3us; 65535us; 0us; 2us; 58us; 59us; 70us; 69us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 30us; 40us; 44us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 30us; 1us; 1us; 1us; 2us; 2us; 3us; 11us; 1us; 3us; 6us; 3us; 4us; 5us; 6us; 7us; 8us; 1us; 3us; 6us; 4us; 4us; 5us; 6us; 7us; 8us; 6us; 4us; 5us; 5us; 6us; 7us; 8us; 6us; 4us; 5us; 6us; 6us; 7us; 8us; 6us; 4us; 5us; 6us; 7us; 7us; 8us; 6us; 4us; 5us; 6us; 7us; 8us; 8us; 6us; 4us; 5us; 6us; 7us; 8us; 9us; 6us; 4us; 5us; 6us; 7us; 8us; 10us; 12us; 4us; 5us; 6us; 7us; 8us; 10us; 19us; 20us; 21us; 22us; 23us; 24us; 11us; 4us; 5us; 6us; 7us; 8us; 19us; 20us; 21us; 22us; 23us; 24us; 6us; 4us; 5us; 6us; 7us; 8us; 19us; 6us; 4us; 5us; 6us; 7us; 8us; 20us; 6us; 4us; 5us; 6us; 7us; 8us; 21us; 6us; 4us; 5us; 6us; 7us; 8us; 22us; 6us; 4us; 5us; 6us; 7us; 8us; 23us; 6us; 4us; 5us; 6us; 7us; 8us; 24us; 6us; 4us; 5us; 6us; 7us; 8us; 28us; 6us; 4us; 5us; 6us; 7us; 8us; 29us; 6us; 4us; 5us; 6us; 7us; 8us; 29us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 2us; 10us; 25us; 1us; 10us; 1us; 12us; 1us; 13us; 5us; 14us; 14us; 15us; 16us; 17us; 5us; 14us; 15us; 15us; 16us; 17us; 5us; 14us; 15us; 16us; 16us; 17us; 5us; 14us; 15us; 16us; 17us; 17us; 5us; 14us; 15us; 16us; 17us; 18us; 5us; 14us; 15us; 16us; 17us; 25us; 5us; 14us; 15us; 16us; 17us; 26us; 1us; 14us; 1us; 15us; 1us; 16us; 1us; 17us; 1us; 18us; 2us; 19us; 23us; 1us; 19us; 2us; 20us; 22us; 1us; 20us; 1us; 21us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 26us; 2us; 26us; 30us; 2us; 27us; 27us; 2us; 27us; 32us; 2us; 27us; 33us; 1us; 27us; 2us; 28us; 29us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 2us; 30us; 30us; 1us; 30us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 11us; 14us; 16us; 23us; 25us; 32us; 39us; 46us; 53us; 60us; 67us; 74us; 87us; 99us; 106us; 113us; 120us; 127us; 134us; 141us; 148us; 155us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 179us; 181us; 183us; 185us; 191us; 197us; 203us; 209us; 215us; 221us; 227us; 229us; 231us; 233us; 235us; 237us; 240us; 242us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 260us; 263us; 266us; 269us; 271us; 274us; 276us; 278us; 280us; 282us; 285us; 287us; 289us; 291us; 293us; 295us; |]
let _fsyacc_action_rows = 76
let _fsyacc_actionTableElements = [|4us; 32768us; 16us; 71us; 18us; 72us; 20us; 74us; 29us; 64us; 0us; 49152us; 2us; 32768us; 0us; 3us; 17us; 70us; 0us; 16385us; 0us; 16386us; 1us; 16395us; 13us; 6us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 6us; 32768us; 14us; 8us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 0us; 16387us; 1us; 16388us; 28us; 31us; 1us; 16389us; 28us; 31us; 3us; 16390us; 24us; 27us; 25us; 28us; 28us; 31us; 3us; 16391us; 24us; 27us; 25us; 28us; 28us; 31us; 1us; 16392us; 28us; 31us; 3us; 16393us; 24us; 27us; 25us; 28us; 28us; 31us; 6us; 32768us; 12us; 35us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 10us; 32768us; 7us; 55us; 8us; 54us; 9us; 50us; 10us; 52us; 12us; 35us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 9us; 32768us; 7us; 55us; 8us; 54us; 9us; 50us; 10us; 52us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 5us; 16403us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 5us; 16404us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 5us; 16405us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 5us; 16406us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 5us; 16407us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 5us; 16408us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 5us; 16412us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 6us; 32768us; 14us; 67us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 5us; 16413us; 24us; 27us; 25us; 28us; 26us; 29us; 27us; 30us; 28us; 31us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 7us; 32768us; 1us; 36us; 2us; 37us; 7us; 49us; 11us; 34us; 27us; 32us; 29us; 5us; 30us; 4us; 0us; 16394us; 0us; 16396us; 0us; 16397us; 2us; 16398us; 5us; 47us; 6us; 48us; 3us; 16399us; 3us; 45us; 5us; 47us; 6us; 48us; 4us; 16400us; 3us; 45us; 4us; 46us; 5us; 47us; 6us; 48us; 4us; 16401us; 3us; 45us; 4us; 46us; 5us; 47us; 6us; 48us; 4us; 16402us; 3us; 45us; 4us; 46us; 5us; 47us; 6us; 48us; 5us; 32768us; 3us; 45us; 4us; 46us; 5us; 47us; 6us; 48us; 12us; 57us; 5us; 32768us; 3us; 45us; 4us; 46us; 5us; 47us; 6us; 48us; 22us; 58us; 7us; 32768us; 1us; 36us; 2us; 37us; 7us; 49us; 11us; 34us; 27us; 32us; 29us; 5us; 30us; 4us; 7us; 32768us; 1us; 36us; 2us; 37us; 7us; 49us; 11us; 34us; 27us; 32us; 29us; 5us; 30us; 4us; 7us; 32768us; 1us; 36us; 2us; 37us; 7us; 49us; 11us; 34us; 27us; 32us; 29us; 5us; 30us; 4us; 7us; 32768us; 1us; 36us; 2us; 37us; 7us; 49us; 11us; 34us; 27us; 32us; 29us; 5us; 30us; 4us; 7us; 32768us; 1us; 36us; 2us; 37us; 7us; 49us; 11us; 34us; 27us; 32us; 29us; 5us; 30us; 4us; 5us; 32768us; 8us; 51us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 5us; 32768us; 8us; 53us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 1us; 32768us; 8us; 56us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 0us; 16409us; 4us; 32768us; 16us; 71us; 18us; 72us; 20us; 74us; 29us; 64us; 1us; 16410us; 17us; 70us; 1us; 16411us; 23us; 63us; 2us; 32768us; 19us; 73us; 23us; 63us; 2us; 32768us; 21us; 75us; 23us; 63us; 7us; 32768us; 1us; 36us; 2us; 37us; 7us; 49us; 11us; 34us; 27us; 32us; 29us; 5us; 30us; 4us; 2us; 32768us; 13us; 66us; 15us; 65us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 1us; 32768us; 15us; 68us; 4us; 32768us; 11us; 33us; 27us; 32us; 29us; 5us; 30us; 4us; 1us; 16414us; 17us; 70us; 4us; 32768us; 16us; 71us; 18us; 72us; 20us; 74us; 29us; 64us; 0us; 16415us; 7us; 32768us; 1us; 36us; 2us; 37us; 7us; 49us; 11us; 34us; 27us; 32us; 29us; 5us; 30us; 4us; 0us; 16416us; 7us; 32768us; 1us; 36us; 2us; 37us; 7us; 49us; 11us; 34us; 27us; 32us; 29us; 5us; 30us; 4us; 0us; 16417us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 11us; 13us; 18us; 25us; 26us; 28us; 30us; 34us; 38us; 40us; 44us; 51us; 62us; 72us; 78us; 84us; 90us; 96us; 102us; 108us; 114us; 121us; 127us; 132us; 137us; 142us; 147us; 152us; 157us; 162us; 170us; 171us; 172us; 173us; 176us; 180us; 185us; 190us; 195us; 201us; 207us; 215us; 223us; 231us; 239us; 247us; 253us; 258us; 264us; 269us; 274us; 276us; 281us; 282us; 287us; 289us; 291us; 294us; 297us; 305us; 308us; 313us; 318us; 320us; 325us; 327us; 332us; 333us; 341us; 342us; 350us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 4us; 3us; 3us; 3us; 3us; 3us; 2us; 3us; 1us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 4us; 4us; 3us; 3us; 3us; 4us; 3us; 3us; 3us; 3us; 6us; 3us; 1us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 5us; 5us; 5us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; 16396us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16409us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 16416us; 65535us; 16417us; |]
let _fsyacc_reductions ()  =    [| 
# 283 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 292 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                                    _1 
                   )
# 46 "Parser.fsy"
                 : Command));
# 303 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                                                        N(_1)        
                   )
# 56 "Parser.fsy"
                 : Aexpr));
# 314 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "Parser.fsy"
                                                        Arr(_1,_3)   
                   )
# 57 "Parser.fsy"
                 : Aexpr));
# 326 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "Parser.fsy"
                                                        Times(_1,_3) 
                   )
# 58 "Parser.fsy"
                 : Aexpr));
# 338 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                                                        Div(_1,_3)   
                   )
# 59 "Parser.fsy"
                 : Aexpr));
# 350 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "Parser.fsy"
                                                        Add(_1,_3)   
                   )
# 60 "Parser.fsy"
                 : Aexpr));
# 362 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                                        Sub(_1,_3)   
                   )
# 61 "Parser.fsy"
                 : Aexpr));
# 374 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                        Power(_1,_3) 
                   )
# 62 "Parser.fsy"
                 : Aexpr));
# 386 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "Parser.fsy"
                                                        Minus(_2)    
                   )
# 63 "Parser.fsy"
                 : Aexpr));
# 397 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                                        ParanA(_2)   
                   )
# 64 "Parser.fsy"
                 : Aexpr));
# 408 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "Parser.fsy"
                                                        Var(_1)      
                   )
# 65 "Parser.fsy"
                 : Aexpr));
# 419 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                                                        B(true)        
                   )
# 68 "Parser.fsy"
                 : Bexpr));
# 429 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "Parser.fsy"
                                                        B(false)       
                   )
# 69 "Parser.fsy"
                 : Bexpr));
# 439 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                                                        And(_1, _3)    
                   )
# 70 "Parser.fsy"
                 : Bexpr));
# 451 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                                        Or(_1, _3)     
                   )
# 71 "Parser.fsy"
                 : Bexpr));
# 463 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "Parser.fsy"
                                                        BitAnd(_1, _3) 
                   )
# 72 "Parser.fsy"
                 : Bexpr));
# 475 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "Parser.fsy"
                                                        BitOr(_1, _3)  
                   )
# 73 "Parser.fsy"
                 : Bexpr));
# 487 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "Parser.fsy"
                                                        Not(_2)        
                   )
# 74 "Parser.fsy"
                 : Bexpr));
# 498 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                                                        LsEq(_1, _4)   
                   )
# 75 "Parser.fsy"
                 : Bexpr));
# 510 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "Parser.fsy"
                                                        GrEq(_1, _4)   
                   )
# 76 "Parser.fsy"
                 : Bexpr));
# 522 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 77 "Parser.fsy"
                                                        Eq(_1, _3)     
                   )
# 77 "Parser.fsy"
                 : Bexpr));
# 534 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                                                        Gr(_1, _3)     
                   )
# 78 "Parser.fsy"
                 : Bexpr));
# 546 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "Parser.fsy"
                                                        Ls(_1, _3)     
                   )
# 79 "Parser.fsy"
                 : Bexpr));
# 558 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "Parser.fsy"
                                                        NEq(_1, _4)    
                   )
# 80 "Parser.fsy"
                 : Bexpr));
# 570 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "Parser.fsy"
                                                        ParanB(_2)     
                   )
# 81 "Parser.fsy"
                 : Bexpr));
# 581 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Bexpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "Parser.fsy"
                                                        Then(_1, _3)   
                   )
# 84 "Parser.fsy"
                 : GuardCommand));
# 593 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : GuardCommand)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : GuardCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 85 "Parser.fsy"
                                                        Else(_1, _3)   
                   )
# 85 "Parser.fsy"
                 : GuardCommand));
# 605 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                                            Assign(_1, _3)        
                   )
# 88 "Parser.fsy"
                 : Command));
# 617 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : Aexpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 89 "Parser.fsy"
                                                            ArrayAssign(_1,_3,_6) 
                   )
# 89 "Parser.fsy"
                 : Command));
# 630 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : Command)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                                            Chain(_1, _3)         
                   )
# 90 "Parser.fsy"
                 : Command));
# 642 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                                                            Skip                  
                   )
# 91 "Parser.fsy"
                 : Command));
# 652 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GuardCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                                            If(_2)                
                   )
# 92 "Parser.fsy"
                 : Command));
# 663 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : GuardCommand)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 93 "Parser.fsy"
                                                            Do(_2)                
                   )
# 93 "Parser.fsy"
                 : Command));
|]
# 675 "Parser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 34;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : Command =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
