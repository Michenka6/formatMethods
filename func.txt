factorial
y := 1;
do x > 0 -> 
    y := y * x; 
    x := x - 1 
od
---------------------------------------------
nthPowerof2
y := 1;
do x > 0 -> 
    y := y * 2; 
    x := x - 1 
od
---------------------------------------------
gcd
do x != y -> 
    if  x < y   -> y := y - x 
    []  x > y   -> x := x - y 
    fi
od
---------------------------------------------
modulus
do x >= y -> 
    x := x - y
od
---------------------------------------------
nthFib
y := 1;
if n<= 2 -> 
    skip
[] n > 2 -> 
    x := 1;
    n := n - 2;
    do n > 0 -> 
        y := x + y;
        x := y - x;
        n := n - 1 
    od
fi
---------------------------------------------
non-deterministic
if x <= 0 ->
    y := -1 
[] x >= 0 -> 
    y := 1 
fi
---------------------------------------------
stuck program
if x < 0 ->
    y := -1 
[] x > 0 -> 
    y := 1 
fi
---------------------------------------------
insertion sort
i := 1;
do i < n ->
    j := i;
    do j > 0 && A[j - 1] > A[ j ] -> 
        A[ j ] := A[j - 1] + A[ j ] ;
        A[j - 1] := A[ j ] - A[j - 1];
        A[ j ] := A[ j ] - A[j - 1];
        j := j - 1 
    od; 
    i := i + 1
od
---------------------------------------------
insertion sort 2
i := 1;
do i < n ->
    j := i;
    do j > 0 && A[j - 1] > A[ j ] -> 
        t := A[j - 1];
        A[j - 1] := A[ j ];
        A[ j ] := t;
        j := j - 1 
    od; 
    i := i + 1
od
---------------------------------------------
bubble sort
i := 1;
do i < n ->
    j := 1;
    do j < n ->
        if j > 0 && A[j - 1] > A[ j ] -> 
            A[ j ] := A[j - 1] + A[ j ];
            A[j - 1] := A[ j ] - A[j - 1];
            A[ j ] := A[ j ] - A[j - 1]
        [] !(j > 0 && A[j - 1] > A[ j ]) ->
             skip 
        fi;
        j := j + 1
    od;
    i := i + 1
od
---------------------------------------------
inner product
i:=0;
j:=0;
do i<n -> 
    if j < m -> 
        y := y + A[i] * B[j];
        j:=j+1
    [] j >= m ->
        i:=i+1;
        j:=0
    fi
od

---------------------------------------------
outer product
i:=0;
j:=0;
do i < n -> 
    do j < m ->
       C[i*m + j] := A[i] * B[j];
       j := j + 1
    od;
    i := i+1;
    j := 0
od
---------------------------------------------
max
ùöíùöè ùö° ‚â• ùö¢ ‚Üí
    ùö£ ‚à∂= ùö°
[] ùö¢ > ùö° ‚Üí
    ùö£ ‚à∂= ùö¢
ùöèùöí
---------------------------------------------
Adding entries in an array
i := 0;
x := 0;
y := 0;
do i < 10 ->
    if A[i] >= 10 ->
        x := x + A[i];
        i := i + 1
    [] A[i] < 0 ->
        i := i + 1;
        break 
    fi;
    y := y + 1
od
---------------------------------------------
