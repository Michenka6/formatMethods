// Open the file that defines the type "expr" we shall use as aExprST
%{
open AST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> WORD
%token TIMES DIV PLUS MINUS POW
%token THEN ELSE
%token ASS  SKIP SEMI IF FI DO OD
%token LPAR RPAR LSQB RSQB
%token TRUE FALSE AND OR ANDBIT ORBIT BANG EQ LS GR 
%token EOF
// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)

%left ASS 
%left PLUS MINUS
%left TIMES DIV
%right POW

%left OR
%left AND
%left NOT

%right 
// We declare the initial non-terminal symbol
%start start

// We specify the return type of each of then non-terminal symbols
%type <Command> start
%type <Aexpr> aExpr
%type <Bexpr> bExpr
%type <Command> cExpr
%type <GuardCommand> gcExpr
// Grammar productions
%%

// The first production in "formal" notation is
// start -> expression
// here written:
start: cExpr EOF             { $1 }

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:
aExpr:
  | NUM                          { N($1)        }
  | WORD LSQB aExpr RSQB         { Arr($1,$3)   }
  | aExpr TIMES aExpr            { Times($1,$3) }
  | aExpr DIV aExpr              { Div($1,$3)   }
  | aExpr PLUS aExpr             { Add($1,$3)   }
  | aExpr MINUS aExpr            { Sub($1,$3)   }
  | aExpr POW aExpr              { Power($1,$3) }
  | MINUS aExpr                  { Minus($2)    }
  | LPAR aExpr RPAR              { ParanA($2)   }
  | WORD                         { Var($1)      }

bExpr:
  | TRUE                         { B(true)        }
  | FALSE                        { B(false)       }
  | bExpr AND bExpr              { And($1, $3)    }
  | bExpr OR bExpr               { Or($1, $3)     }
  | bExpr ANDBIT bExpr           { BitAnd($1, $3) }
  | bExpr ORBIT bExpr            { BitOr($1, $3)  }
  | BANG bExpr                   { Not($2)        }
  | aExpr LS EQ aExpr            { LsEq($1, $4)   }
  | aExpr GR EQ aExpr            { GrEq($1, $4)   }
  | aExpr EQ aExpr               { Eq($1, $3)     }
  | aExpr GR aExpr               { Gr($1, $3)     }
  | aExpr LS aExpr               { Ls($1, $3)     }
  | aExpr BANG EQ aExpr          { NEq($1, $4)    }
  | LPAR bExpr RPAR              { ParanB($2)     }

gcExpr:
  | bExpr THEN cExpr             { Then($1, $3)   }
  | gcExpr ELSE gcExpr           { Else($1, $3)   }

cExpr:
  | WORD ASS aExpr                   { Assign($1, $3)        }
  | WORD LSQB aExpr RSQB ASS aExpr   { ArrayAssign($1,$3,$6) }
  | cExpr SEMI cExpr                 { Chain($1, $3)         }
  | SKIP                             { SkipGC                  }
  | IF gcExpr FI                     { If($2)                }
  | DO gcExpr OD                     { Do($2)                }

%%
